#frozen_string_literal: true

require 'minitest/autorun'
require 'set'
require_relative './priority_queue'
# https://adventofcode.com/2019/day/18
class Day18 < MiniTest::Test
  # Cells
  ENTRANCE = '@'
  OPEN = '.'
  WALL = '#'
  # Distance from '@' to each key
  VAULT = DATA.read.freeze

  YX = Struct.new(:yx, :door_keys) do
    def to_ary
      [yx[0], yx[1], door_keys]
    end

    def eql?(other)
      other.yx == yx && door_other.keys == door_keys
    end

    def ==(other)
      other.yx == yx && other.door_keys == door_keys
    end
  end

  def test_sample_1
    vault = <<~EOS
     #########
     #b.A.@.a#
     #########
    EOS

    entrance, keys, map = vault_map(vault)
    # for each key
    assert_equal [[2, %w[a]]], shortest_path(YX.new(entrance, []), [keys['a']], map)
    assert_equal [[Float::INFINITY, []]], shortest_path(YX.new(entrance, []), [keys['b']], map)
    assert_equal [[6, %w[a b]]], shortest_path(YX.new(keys['a'], ['a']), [keys['b']], map)
    assert_equal 8, solve_1(entrance, keys, map)
  end

  def test_sample_2
    vault = <<~EOS
     ########################
     #f.D.E.e.C.b.A.@.a.B.c.#
     ######################.#
     #d.....................#
     ########################
    EOS

    entrance, keys, map = vault_map(vault)
    assert_equal 86, solve_1(entrance, keys, map)
  end

  def test_sample_3
    vault = <<~EOS
     ########################
     #...............b.C.D.f#
     #.######################
     #.....@.a.B.c.d.A.e.F.g#
     ########################
    EOS

    entrance, keys, map = vault_map(vault)
    assert_equal 132, solve_1(entrance, keys, map)
  end

  def test_sample_4
    vault = <<~EOS
     #################
     #i.G..c...e..H.p#
     ########.########
     #j.A..b...f..D.o#
     ########@########
     #k.E..a...g..B.n#
     ########.########
     #l.F..d...h..C.m#
     #################
    EOS

    entrance, keys, map = vault_map(vault)
    assert_equal 136, solve_1(entrance, keys, map)
  end

  def test_final_1
    entrance, keys, map = vault_map(VAULT)
    assert_equal 3546, solve_1(entrance, keys, map)
  end

  private

  def solve_1(entrance, door_keys, map)
    all_door_keys = door_keys.keys.sort
    # keep the [steps, YX] in the PriorityQueue - +steps+ is a priority key
    pq = PriorityQueue.new { |left, right| left[0] <=> right[0] }
    pq.push([0, YX.new(entrance, [])])
    min_steps = Float::INFINITY
    visited = {}
    until pq.empty?
      steps_so_far, position = pq.pop

      keys_to_go = all_door_keys - position.door_keys
      next if shorter_path_exist?(position.yx, steps_so_far, keys_to_go, visited)

      visited[[position.yx, keys_to_go]] = steps_so_far
      min_steps = [min_steps, steps_so_far].min if keys_to_go.empty?

      # collect the door keys y,x and run the +shortest_path+ from +position+
      keys_to_go_coords = keys_to_go.map { |door_key| door_keys[door_key] }
      steps_and_collected_keys = shortest_path(position, keys_to_go_coords, map)

      steps_and_collected_keys.each_with_index do |(steps, collected_keys), i|
        next if steps == Float::INFINITY

        updated_keys = (position.door_keys | collected_keys).sort

        # puts updated_keys.inspect
        # puts door_keys[keys_to_go[i]].inspect
        # puts steps + steps_so_far
        # puts '------------'
        pq.push([steps + steps_so_far, YX.new(door_keys[keys_to_go[i]], updated_keys)]) if min_steps > steps_so_far + steps
      end
    end
    min_steps
  end

  def shortest_path(source, targets, map)
    dist_to = Hash.new { |h, e| h[e] = [Float::INFINITY, []] }
    dist_to[source.yx] = [0, source.door_keys.dup]
    stack = []
    visited = [].to_set
    stack.push(source)

    until stack.empty?
      from = stack.pop
      visited.add(from.yx)
      yx_neighbours = neighbours(from, map)
      yx_neighbours.each do |neighbour|
        next if visited.include?(neighbour.yx)

        if dist_to[neighbour.yx][0] > dist_to[from.yx][0] + 1
          dist_to[neighbour.yx] = [dist_to[from.yx][0] + 1, neighbour.door_keys]
        end
        stack.push(neighbour)
      end
    end
    targets.map { |target| dist_to[target] }
  end

  # if there is x, y and the +keys_to_go+ is a subset, AND the steps_so_far is larger
  # then there is a shorter path
  def shorter_path_exist?(yx, steps, keys_to_go, visited)
    steps >= (visited[[yx, keys_to_go]] || Float::INFINITY)
  end

  def vault_map(vault)
    rows = vault.split("\n")
    entrance = nil
    keys = {}
    map = rows.each_with_object({}).with_index do |(e, h), i|
      e.chars.each_with_object(h).with_index do |(c, h), j|
        next if c == WALL

        h[[i, j]] = c
        keys[c] = [i, j] if ('a'..'z').cover?(c)
        entrance = [i, j] if c == ENTRANCE
      end
    end
    [entrance, keys, map]
  end

  def neighbours(coords, vault_map)
    y, x, keys = coords
    [
      [y - 1, x],
      [y + 1, x],
      [y, x - 1],
      [y, x + 1]
    ].each_with_object([]) do |yx, a|
      next unless vault_map[yx]

      c = vault_map[yx]
      # door cell and door key present?
      if ('A'..'Z').cover?(c)
        a << YX.new(yx, keys.dup) if keys.include?((c.ord + 32).chr)
      elsif ('a'..'z').cover?(c)
        a << YX.new(yx, (keys | [c]).uniq)
      else
        a << YX.new(yx, keys.dup)
      end
    end
  end
end
__END__
#################################################################################
#.........#.............#.....#.....R.#.#.....#...............#.#..v............#
#######.#T#.#######.###.#####.#.###.#.#.#.###.#.#.###.#######.#.#.#####.#######.#
#.....#.#.#.#.......#.#.F...#...#...#...#...#.#.#...#.#.....#.#...#...#...#.....#
#.###.#.#.#.#.#######.#####.###.#.#####.#.#.###.###.###.###.#.#.#####.###.###.###
#.#.#...#.#.#..a..#.......#...#.#.#...#.#.#.......#.......#.#.#.#.....#.#...#...#
#L#.#####.#.#####.#.###.#.###.###.#.###.#.#########.#######.#.#.###.#.#.###.###.#
#.#.......#...#...#...#.#...#...#.#.#...#.....#...#.#.....#.#.#.....#.....#...#.#
#.###########.#.#####.#.###.###.#.#.#.#####.###.#.###.###.#.#.#####.#########.#.#
#.............#.#...#.#.#...#...#.#.#...#.#.#...#.....#...#.#...#...#.........#.#
#.#########.###.###.#.#.#####.###.#.###.#.#.#Z#########.###.###.#.###.#########.#
#...#.....#...#...#...#.......#...#.....#...#...#...#.#...#...#.#...#...#.......#
###.#.###.#######.#.###########.#.#.###########.#.#.#.###.#.#.#.#######.#######.#
#.#.#.#...#.......#.....#.......#.#.....#.......#.#.M.#...#.#.#.#.....#.#.....#.#
#.#.#.#.###.###########.#.#######.#######.#######.#####.#####.#.#.###.#.#.###.###
#.#.#.#.....#...#...G.#.#.....#.#.......#...B.#.#.....#.#..s..#...#.#.#.#.#.#...#
#.#.#.#######.###.#.###.#####.#.#######.#.###.#.#.###.#.#.#########.#.#.#.#.###.#
#...#.#...#.....#.#.#...#.......#.....#.#.#i..#...#.#.....#.....#.....#.....#...#
#.###.#.#.#####.#.#.#.###########.###.#.###.#####.#.#######.###X#.###########.#.#
#.#.#...#.#..c..#.#.....#.......#h#.#...#...#...#.....#..x#...#.#.#.........#.#.#
#.#.#####.#.#####.#####.#.#####.#.#.###W#.###.#Y#######D#.#.###.#.#####.###.#Q###
#...#...#.#.#.....#b..#...#.#...#.#...#.#...#.#....n..#.#...#.#.#.#.....#...#...#
###.#.#.#.#.#.#####.#######.#.###.#.#.#.#.#.#.#######.#.#####.#.#.#.#####.#####.#
#.#.#.#.#.#.......#.....#...#.....#.#.#.#.#.#.#.#.....#...#...#.#.#.#.#...#.....#
#.#.#.#.#.#.###########.###.#######.#.#.###.#.#.#N#######.#E###.#.#.#.#.###.###.#
#...#.#...#.#.#.....#...#.........#.#.#.#pI.#...#......d..#....e#...#.#.....#.#.#
#####.#####.#.#.###.#.###.#########.#.#.#.#####.#####################.#######.#.#
#.....#...#.#.#...#...#.......#.....#.#.#.....#y#.....................#.........#
#.#####.###.#.###.#####.#####.#.#####.#.#####.#.#.###########.###.###.#.#########
#...#.......#...#...#.#.#.#...#.#.....#.#...#.#.#...#.#.....#.#...#...#.........#
#.#.#.#########.###.#.#.#.#.#.#.#.###.#.###.#.#.###.#.#.###.###.###.###########.#
#.#.#.#...........#.#...#.#.#.#.#...#.#.#...#.P.#.....#.#.......#.........#...#.#
#.#.#.#.#####.#####.#.###.#.###.###.#.#.#.###########.#.#.#####.#########.#.#.#C#
#.#.#...#.#...#...#.#.....#...#.#.#.#.#.#.#.........#.#.#.#...#.#.....#.#...#.#.#
#.#.#####.#.###.#.#.#####.###.#.#.#.###.#.#.###.###.###.###.#.###.###.#.#.#####.#
#.#.#.......#.#.#.#.#.....#.#.#.#.#...#.#.#...#...#.....#...#.#...#.#.#.#.#.....#
###.#.#######.#.#.#.#.#####.#.#.#.###.#.#.###.###.###.###.###.#.###.#.#.#.#.#####
#...#.........#.#...#.#.....#...#...#.#.#.....#.#.#...#...#...#...#.#.#..o#...#.#
#.#############.#####.#####.#######.#.#.#.#####.#.#####.###.#####.#.#.#######.#.#
#...........U...#...................#...........#.........#.........#...........#
#######################################.@.#######################################
#.....#.O.#.....#.......#...#.....#...........#.....#.............#...#...#..k..#
#####.#.#.#.#.#.###.###.#.###.#.###.###.#.###.###.#.###.#####.###.#.#.#.#.#.#.#.#
#...#...#...#.#...#...#.#.#...#.....#...#...#...#.#...#.#.....#...#.#.#.#...#.#.#
#.#.#.#######.###.###.#.#.#.#########.#.###.###.#.###.#.#.#.#####.#.#.#######.#.#
#.#.#...#.....#.#...#.#...#...#...#...#.#...#...#.#...#.#.#.#...#.#.#..u#.....#.#
#.#.#####.#####.###.#.#######.###.#.###.#.#####.#.#.###.#.###.#.###.###.#.#####.#
#.#.......#.........#.......#...#.#.#...#.....#...#...#.#.#...#.....#.#.#.#.....#
#.#########.###########.###.###.#.#.#.#######.#######H###.#.#########.#.#.#######
#.....#...#...#.......#...#.......#.#.#.#.....#.....#.#...#.#.........#.#.#.....#
#####.#.#.###.#####.#.###.#########.#.#.#.#####.#.###.#.#.#.###.###.#.#.#.#.###.#
#.....#.#...#....r..#.#.....#...#...#..w#.#.....#.......#.#...#.#...#.#.#.....#.#
#.#####.#############.#######.#.#.#####.#.###.###############.#.#.###.#.#######.#
#.#.....#.....#...............#...#.#...#...#.......#.......#.#.#...#.#...#.....#
#.###.###.#.###.###################.#.###.#.#########.#####.#.#####.#####.#.###.#
#..q#.....#.....#...#.......#...#.....#.#.#...........#.#...#.....#.....#.#.#.#.#
###.#.###########.#.#.#####.#.###.#####.#.#############.#.#.#####.#.#.###.#.#.#.#
#.#.#.......#.....#...#...#.#...#.......#.#...#...#.....#.#.....#z#.#...#.#.#.#.#
#.#.#######.#.#########.#.#.#.#.#######.#.#.#.#.#.#####.#.###.###.#####.#.#.#.#.#
#.#.....#...#.....#.#...#...#.#.......#.#.#.#...#.......#.#...#...#.....#.#.#...#
#.#####.#########.#.#.#########.#######.#.#.#######.#####.#.###.###.###.#.#.###.#
#.....#.#...#.....#.#.#.K.......#.......#.#.#.....#.#.....#.#.#.#...#...#.#...#.#
#.#.###.#.#.#.#####.#####.#.#####.#######.#.###.#.#.#.#######.#.#.###.###.#.#.#.#
#.#...#...#.#.#.....#.....#.#.....#.....#.#...#.#...#.#.....#...#...#...#.#.#.#.#
#.###.#####.#.#.###.#.###.###.#####.#.#.#.###.#####.#.#.###.#####.#.###.#.###.#.#
#...#.#...#...#...#...#...#...#...#.#.#.#...#.#...#.#.....#.....#.#...#.#.J...#.#
###.#.#.#.#######.#####.###.###.#.###.#.###.#.#.#.#########.###.#.###.#########.#
#.#.#...#.........#...#...#.#...#...#.#.#.#.#...#...#.....#.#...#...#.#.........#
#.#.#######.#.#######.###.#.#.#####.#.#.#.#.#.#####.#.###.#.#.###.###.#.#########
#.#.#.....#.#.#.....#...#.#.#.#...#...#.#...#.#...#.#.#.#...#.#...#...#.#.......#
#.#.#.#####V#.#.###.#.###.#.#.#.#.#####.#.#####.#.#.#.#.#####.#.###.###.#.###.#.#
#...#...#...#j#...#.#...#.#...#.#.....#.#...#...#...#.#.......#...#.....#...#.#.#
#.#####.#.#######.#.###.#.#####.###.###.###.#.#####.#.###.#######.###########.#.#
#.......#.......#.#...#.#.#.......#.#...#...#...#...#...#.#...#...#...#.....#.#l#
#######.#####.#.#.###.#.#.#.#####.#.#.###.###.#.#.#####.###.#.#.###.#.#.#.#.#.#.#
#.....#.....#.#.#...#.#.#.#...#...#.#...#...#.#.#.....#.#...#...#...#...#.#...#.#
#.###.#####.#.###.###.#.#.###.#.#######.###.#.#.#######.#.#######.#######.#####.#
#.#..m..#...#.....#...#.....#.#.......#f#...#.#...#.....#.#...........#...#..t#.#
#.#.#####.#########.#########.#######.#.#.#######.#.#####.#############.###.###.#
#.#.......S.......#.....A...........#...#g........#.....................#.......#
#################################################################################
